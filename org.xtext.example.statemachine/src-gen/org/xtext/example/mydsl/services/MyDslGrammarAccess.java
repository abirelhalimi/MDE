/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cStatemachineAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatemachineStatemachineParserRuleCall_0 = (RuleCall)cStatemachineAssignment.eContents().get(0);
		
		//Model:
		//	statemachine=Statemachine;
		@Override public ParserRule getRule() { return rule; }
		
		//statemachine=Statemachine
		public Assignment getStatemachineAssignment() { return cStatemachineAssignment; }
		
		//Statemachine
		public RuleCall getStatemachineStatemachineParserRuleCall_0() { return cStatemachineStatemachineParserRuleCall_0; }
	}
	public class StatemachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTransitionsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTransitionsTransitionParserRuleCall_1_0_0 = (RuleCall)cTransitionsAssignment_1_0.eContents().get(0);
		private final Assignment cStateAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_1_1_0 = (RuleCall)cStateAssignment_1_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Statemachine:
		//	START (transitions+=Transition* | state=State) END;
		@Override public ParserRule getRule() { return rule; }
		
		//START (transitions+=Transition* | state=State) END
		public Group getGroup() { return cGroup; }
		
		//START
		public RuleCall getSTARTTerminalRuleCall_0() { return cSTARTTerminalRuleCall_0; }
		
		//(transitions+=Transition* | state=State)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_1_0() { return cTransitionsAssignment_1_0; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_1_0_0() { return cTransitionsTransitionParserRuleCall_1_0_0; }
		
		//state=State
		public Assignment getStateAssignment_1_1() { return cStateAssignment_1_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_1_1_0() { return cStateStateParserRuleCall_1_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_2() { return cENDTerminalRuleCall_2; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceStateParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cArrowParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetStateParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		private final Assignment cEventAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventSTRINGTerminalRuleCall_3_0 = (RuleCall)cEventAssignment_3.eContents().get(0);
		
		//Transition:
		//	source=State Arrow target=State event=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//source=State Arrow target=State event=STRING
		public Group getGroup() { return cGroup; }
		
		//source=State
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//State
		public RuleCall getSourceStateParserRuleCall_0_0() { return cSourceStateParserRuleCall_0_0; }
		
		//Arrow
		public RuleCall getArrowParserRuleCall_1() { return cArrowParserRuleCall_1; }
		
		//target=State
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//State
		public RuleCall getTargetStateParserRuleCall_2_0() { return cTargetStateParserRuleCall_2_0; }
		
		//event=STRING
		public Assignment getEventAssignment_3() { return cEventAssignment_3; }
		
		//STRING
		public RuleCall getEventSTRINGTerminalRuleCall_3_0() { return cEventSTRINGTerminalRuleCall_3_0; }
	}
	public class ArrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Arrow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Arrow:
		//	'=>' | '->' | '-->';
		@Override public ParserRule getRule() { return rule; }
		
		//'=>' | '->' | '-->'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_0() { return cEqualsSignGreaterThanSignKeyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_2; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketAsteriskRightSquareBracketKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Assignment cSAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSIDTerminalRuleCall_1_0 = (RuleCall)cSAssignment_1.eContents().get(0);
		
		//State:
		//	'[*]' | s=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'[*]' | s=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[*]'
		public Keyword getLeftSquareBracketAsteriskRightSquareBracketKeyword_0() { return cLeftSquareBracketAsteriskRightSquareBracketKeyword_0; }
		
		//s=ID
		public Assignment getSAssignment_1() { return cSAssignment_1; }
		
		//ID
		public RuleCall getSIDTerminalRuleCall_1_0() { return cSIDTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final StatemachineElements pStatemachine;
	private final TransitionElements pTransition;
	private final ArrowElements pArrow;
	private final StateElements pState;
	private final TerminalRule tSTART;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatemachine = new StatemachineElements();
		this.pTransition = new TransitionElements();
		this.pArrow = new ArrowElements();
		this.pState = new StateElements();
		this.tSTART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.START");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	statemachine=Statemachine;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statemachine:
	//	START (transitions+=Transition* | state=State) END;
	public StatemachineElements getStatemachineAccess() {
		return pStatemachine;
	}
	
	public ParserRule getStatemachineRule() {
		return getStatemachineAccess().getRule();
	}
	
	//Transition:
	//	source=State Arrow target=State event=STRING;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Arrow:
	//	'=>' | '->' | '-->';
	public ArrowElements getArrowAccess() {
		return pArrow;
	}
	
	public ParserRule getArrowRule() {
		return getArrowAccess().getRule();
	}
	
	//State:
	//	'[*]' | s=ID;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//terminal START:
	//	'@startuml';
	public TerminalRule getSTARTRule() {
		return tSTART;
	}
	
	//terminal END:
	//	'@enduml';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
