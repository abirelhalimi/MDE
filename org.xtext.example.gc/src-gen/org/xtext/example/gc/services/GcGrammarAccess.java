/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.gc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GcGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gc.Gc.Model");
		private final Assignment cConditionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_0 = (RuleCall)cConditionsAssignment.eContents().get(0);
		
		//Model:
		//	conditions+=Condition*;
		@Override public ParserRule getRule() { return rule; }
		
		//conditions+=Condition*
		public Assignment getConditionsAssignment() { return cConditionsAssignment; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_0() { return cConditionsConditionParserRuleCall_0; }
	}
	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gc.Gc.Position");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOrdKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInhKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Position:
		//	'Ord' | 'Inh';
		@Override public ParserRule getRule() { return rule; }
		
		//'Ord' | 'Inh'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Ord'
		public Keyword getOrdKeyword_0() { return cOrdKeyword_0; }
		
		//'Inh'
		public Keyword getInhKeyword_1() { return cInhKeyword_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gc.Gc.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionSTRINGTerminalRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final RuleCall cTHENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionPositionParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEventAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEventIDTerminalRuleCall_5_0 = (RuleCall)cEventAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Condition:
		//	IF condition=STRING THEN position=Position '(' event=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//IF condition=STRING THEN position=Position '(' event=ID ')'
		public Group getGroup() { return cGroup; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_0() { return cIFTerminalRuleCall_0; }
		
		//condition=STRING
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_1_0() { return cConditionSTRINGTerminalRuleCall_1_0; }
		
		//THEN
		public RuleCall getTHENTerminalRuleCall_2() { return cTHENTerminalRuleCall_2; }
		
		//position=Position
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//Position
		public RuleCall getPositionPositionParserRuleCall_3_0() { return cPositionPositionParserRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//event=ID
		public Assignment getEventAssignment_5() { return cEventAssignment_5; }
		
		//ID
		public RuleCall getEventIDTerminalRuleCall_5_0() { return cEventIDTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	
	
	private final ModelElements pModel;
	private final PositionElements pPosition;
	private final ConditionElements pCondition;
	private final TerminalRule tIF;
	private final TerminalRule tTHEN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GcGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPosition = new PositionElements();
		this.pCondition = new ConditionElements();
		this.tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gc.Gc.IF");
		this.tTHEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gc.Gc.THEN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.gc.Gc".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	conditions+=Condition*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Position:
	//	'Ord' | 'Inh';
	public PositionElements getPositionAccess() {
		return pPosition;
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}
	
	//Condition:
	//	IF condition=STRING THEN position=Position '(' event=ID ')';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//terminal IF:
	//	'if';
	public TerminalRule getIFRule() {
		return tIF;
	}
	
	//terminal THEN:
	//	'then';
	public TerminalRule getTHENRule() {
		return tTHEN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
